function GetObjectivesWithProgressElapsedAndRecordTimes()
    local text = ""
    local objectives = GetScenarioObjectives()
    local dungeon, _, steps = C_Scenario.GetStepInfo()

    -- Check if objectives table is empty or not properly populated
    if #objectives == 0 then
        return
    end

    for i, objective in ipairs(objectives) do
        local objectiveName = objective.name
        local objectiveProgress = objective.progress
        local recordKillTime = formatSecondsToMinutes(GetRecordKillTime(dungeon, objectiveName)) -- Retrieve record kill time
print("objective:", i, objectiveName,objectiveProgress,recordKillTime)
        if i < #objectives then 
            if (objectiveProgress ~= objectiveStatus) then
                local timeString = formatSecondsToMinutes(GetElapsedTime())
                if(timeString < recordKillTime) then
                    Challenge_Mode_HelperDB.scenarios[scenarioName][objectiveName] = GetElapsedTime(startTime)
                end
            end
            text = ("%s %s %s"):format(objectiveName, timeString, recordKillTime)
        else
            -- Last objective is number of enemies
            text = ("%s : %d"):format(objectiveName, objectiveProgress)
        end
    end
    return text
end


function GetRecordKillTime(scenarioName, objectiveName)
    LoadSavedVariables()

    local tempCompletionTime = nil
    if Challenge_Mode_HelperDB and Challenge_Mode_HelperDB.scenarios then
        for savedScenarioName, scenarioData in pairs(Challenge_Mode_HelperDB.scenarios) do
            if savedScenarioName == scenarioName then
                for savedObjectiveName, completionTime in pairs(scenarioData) do
                    if savedObjectiveName == objectiveName then
                        tempCompletionTime = completionTime
                    end
                end
            end
        end
    else
        print("Challenge_Mode_HelperDB or scenarios table is nil")
    end

    return tempCompletionTime
end

function GetScenarioObjectives()
    local dungeon, _, steps = C_Scenario.GetStepInfo()
    local objectives = {}

    for i = 1, steps do
        local objectiveName, _, completed, progress = C_Scenario.GetCriteriaInfo(i)
        
        -- If the objective is completed, mark it as completed
        local status = completed and "|cFF00FF00Completed|r" or "|cFFFF0000Incomplete|r"
        
        -- Build the objective table with name, status, and progress
        table.insert(objectives, {name = objectiveName, status = status, progress = progress})
    end
    
    return objectives
end